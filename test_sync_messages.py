#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import os
import sys
import requests
import json
from datetime import datetime

def test_sync_message_sending():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–æ–¥—É–ª—è
    try:
        from bot.__main__ import send_message_sync
        
        # –¢–µ—Å—Ç–æ–≤—ã–π chat_id (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
        test_chat_id = os.getenv('TEST_CHAT_ID', '123456789')
        test_message = f"üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {test_chat_id}...")
        result = send_message_sync(test_chat_id, test_message)
        
        if result:
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def test_webhook_with_commands():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç webhook —Å –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook —Å –∫–æ–º–∞–Ω–¥–∞–º–∏...")
    
    # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start
    start_update = {
        "update_id": 123456789,
        "message": {
            "message_id": 1,
            "from": {
                "id": 123456789,
                "is_bot": False,
                "first_name": "Test",
                "username": "testuser"
            },
            "chat": {
                "id": 123456789,
                "first_name": "Test",
                "type": "private"
            },
            "date": int(datetime.now().timestamp()),
            "text": "/start"
        }
    }
    
    try:
        response = requests.post(
            'http://localhost:5000/webhook',
            json=start_update,
            timeout=10
        )
        print(f"‚úÖ /start command: {response.status_code}")
        
        # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /status
        status_update = {
            "update_id": 123456790,
            "message": {
                "message_id": 2,
                "from": {
                    "id": 123456789,
                    "is_bot": False,
                    "first_name": "Test",
                    "username": "testuser"
                },
                "chat": {
                    "id": 123456789,
                    "first_name": "Test",
                    "type": "private"
                },
                "date": int(datetime.now().timestamp()),
                "text": "/status"
            }
        }
        
        response = requests.post(
            'http://localhost:5000/webhook',
            json=status_update,
            timeout=10
        )
        print(f"‚úÖ /status command: {response.status_code}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥: {e}")
        return False

def test_webhook_with_text():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç webhook —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏...")
    
    test_messages = [
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞",
        "–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –≤ Notion"
    ]
    
    success_count = 0
    
    for i, message in enumerate(test_messages, 1):
        text_update = {
            "update_id": 123456791 + i,
            "message": {
                "message_id": 10 + i,
                "from": {
                    "id": 123456789,
                    "is_bot": False,
                    "first_name": "Test",
                    "username": "testuser"
                },
                "chat": {
                    "id": 123456789,
                    "first_name": "Test",
                    "type": "private"
                },
                "date": int(datetime.now().timestamp()),
                "text": message
            }
        }
        
        try:
            response = requests.post(
                'http://localhost:5000/webhook',
                json=text_update,
                timeout=10
            )
            if response.status_code == 200:
                print(f"‚úÖ Text message {i}: OK")
                success_count += 1
            else:
                print(f"‚ùå Text message {i}: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Text message {i}: {e}")
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(test_messages)} —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    return success_count == len(test_messages)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    bot_token = os.getenv('BOT_TOKEN')
    test_chat_id = os.getenv('TEST_CHAT_ID')
    
    print(f"  BOT_TOKEN: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if bot_token else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    print(f"  TEST_CHAT_ID: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if test_chat_id else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    
    if not bot_token:
        print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å BOT_TOKEN=your_token")
        print("   –¢–µ—Å—Ç—ã –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    
    print("\n" + "=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", test_sync_message_sending),
        ("Webhook —Å –∫–æ–º–∞–Ω–¥–∞–º–∏", test_webhook_with_commands),
        ("Webhook —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏", test_webhook_with_text),
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\nüß™ {test_name}:")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("\nüí° –¢–µ–ø–µ—Ä—å –≤–∞—à –±–æ—Ç –¥–æ–ª–∂–µ–Ω:")
        print("  - –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –æ—à–∏–±–æ–∫ event loop")
        print("  - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã /start –∏ /status")
        print("  - –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏.")
    
    return passed == len(results)

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
