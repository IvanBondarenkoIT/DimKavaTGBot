#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Notion
–ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import os
import requests
from dotenv import load_dotenv


def get_database_schema():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Notion"""
    load_dotenv()
    
    notion_token = os.getenv("NOTION_TOKEN")
    database_id = os.getenv("NOTION_DATABASE_ID")
    
    if not notion_token or not database_id:
        print("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è NOTION_TOKEN –∏–ª–∏ NOTION_DATABASE_ID")
        return None
    
    headers = {
        "Authorization": f"Bearer {notion_token}",
        "Notion-Version": "2022-06-28"
    }
    
    try:
        response = requests.get(
            f"https://api.notion.com/v1/databases/{database_id}",
            headers=headers
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ö–µ–º—ã: {e}")
        return None


def analyze_database_schema():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Notion")
    print("=" * 50)
    
    schema = get_database_schema()
    if not schema:
        return
    
    print(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {schema.get('title', [{}])[0].get('text', {}).get('content', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
    print(f"üÜî ID: {schema.get('id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    print()
    
    properties = schema.get('properties', {})
    print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ ({len(properties)}):")
    print("-" * 50)
    
    title_properties = []
    status_properties = []
    other_properties = []
    
    for prop_name, prop_data in properties.items():
        prop_type = prop_data.get('type', 'unknown')
        
        if prop_type == 'title':
            title_properties.append(prop_name)
        elif prop_type == 'status':
            status_properties.append(prop_name)
        else:
            other_properties.append(prop_name)
        
        print(f"  ‚Ä¢ {prop_name} ({prop_type})")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        if prop_type == 'status':
            options = prop_data.get('status', {}).get('options', [])
            if options:
                option_names = [opt.get('name', '') for opt in options]
                print(f"    –í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(option_names)}")
    
    print()
    print("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è .env —Ñ–∞–π–ª–∞:")
    print("-" * 50)
    
    if title_properties:
        print(f"NOTION_TITLE_PROPERTY={title_properties[0]}")
    else:
        print("‚ùå –ù–µ—Ç —Å–≤–æ–π—Å—Ç–≤ —Ç–∏–ø–∞ 'title' –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞!")
        print("   –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π—Å—Ç–≤–æ —Ç–∏–ø–∞ 'Title' –≤ –≤–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    
    if status_properties:
        print(f"NOTION_STATUS_PROPERTY={status_properties[0]}")
    else:
        print("NOTION_STATUS_PROPERTY=")
        print("   (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ —Å—Ç–∞—Ç—É—Å–∞)")
    
    print()
    print("üìù –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:")
    print("-" * 50)
    
    if title_properties:
        title_prop = title_properties[0]
        print(f"properties = {{")
        print(f'    "{title_prop}": {{')
        print(f'        "title": [{{"text": {{"content": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏"}}}}]')
        print(f'    }}')
        
        if status_properties:
            status_prop = status_properties[0]
            print(f'    "{status_prop}": {{')
            print(f'        "status": {{"name": "Not Started"}}')
            print(f'    }}')
        
        print(f"}}")
    else:
        print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –±–µ–∑ —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–∏–ø–∞ 'title'")


def test_simple_task_with_schema():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π"""
    print("\nüß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π")
    print("=" * 50)
    
    schema = get_database_schema()
    if not schema:
        return
    
    properties = schema.get('properties', {})
    title_properties = [name for name, data in properties.items() if data.get('type') == 'title']
    
    if not title_properties:
        print("‚ùå –ù–µ—Ç —Å–≤–æ–π—Å—Ç–≤ —Ç–∏–ø–∞ 'title' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏")
        return
    
    title_prop = title_properties[0]
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É
    notion_token = os.getenv("NOTION_TOKEN")
    database_id = os.getenv("NOTION_DATABASE_ID")
    
    headers = {
        "Authorization": f"Bearer {notion_token}",
        "Content-Type": "application/json",
        "Notion-Version": "2022-06-28"
    }
    
    properties_data = {
        title_prop: {
            "title": [
                {
                    "text": {
                        "content": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
                    }
                }
            ]
        }
    }
    
    data = {
        "parent": {"database_id": database_id},
        "properties": properties_data
    }
    
    try:
        response = requests.post(
            "https://api.notion.com/v1/pages",
            headers=headers,
            json=data
        )
        
        if response.status_code == 200:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ Notion")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏: {response.status_code} - {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyze_database_schema()
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    response = input("\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏? (y/N): ")
    if response.lower() == 'y':
        test_simple_task_with_schema()


if __name__ == "__main__":
    main()



