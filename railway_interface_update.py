#!/usr/bin/env python3
"""
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è Railway
"""

import os
from flask import Flask, request, jsonify
from datetime import datetime
import requests

app = Flask(__name__)

@app.route('/')
def home():
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Railway"""
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv('BOT_TOKEN', '–ù–ï –ù–ê–°–¢–†–û–ï–ù')
    notion_token = os.getenv('NOTION_TOKEN', '–ù–ï –ù–ê–°–¢–†–û–ï–ù')
    notion_db_id = os.getenv('NOTION_DATABASE_ID', '–ù–ï –ù–ê–°–¢–†–û–ï–ù')
    
    return f"""<html>
<head>
    <title>DimKavaTGBot - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; background-color: #f0f8ff; }}
        .container {{ background: white; padding: 30px; border-radius: 15px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); }}
        .status {{ color: green; font-weight: bold; font-size: 18px; }}
        .error {{ color: red; font-weight: bold; font-size: 16px; }}
        .warning {{ color: orange; font-weight: bold; }}
        .info {{ color: blue; font-size: 16px; }}
        .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ DimKavaTGBot - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</h1>
            <p>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞</p>
        </div>
        
        <p class="status">‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç (railway_interface_update.py)</p>
        <p class="info">‚è∞ –í—Ä–µ–º—è: {current_time}</p>
        <p class="info">üåê –î–æ–º–µ–Ω: https://dimkavatgbot-production.up.railway.app</p>
        
        <hr>
        <h2>üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:</h2>
        <p><strong>BOT_TOKEN:</strong> <span class="{'error' if bot_token == '–ù–ï –ù–ê–°–¢–†–û–ï–ù' else 'status'}">{bot_token[:10]}{'...' if len(bot_token) > 10 else ''}</span></p>
        <p><strong>NOTION_TOKEN:</strong> <span class="{'error' if notion_token == '–ù–ï –ù–ê–°–¢–†–û–ï–ù' else 'status'}">{notion_token[:10]}{'...' if len(notion_token) > 10 else ''}</span></p>
        <p><strong>NOTION_DATABASE_ID:</strong> <span class="{'error' if notion_db_id == '–ù–ï –ù–ê–°–¢–†–û–ï–ù' else 'status'}">{notion_db_id}</span></p>
        
        <hr>
        <h2>üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</h2>
        <p>1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway</p>
        <p>2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–ø–ª–æ–π</p>
        <p>3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–∞–º–∏ /start –∏ /status</p>
        
        <hr>
        <p><strong>üéØ –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã - –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å!</strong></p>
        
                 <hr>
         <h2>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞:</h2>
         <button onclick="testBot()" style="background: #4CAF50; color: white; padding: 15px 30px; border: none; border-radius: 8px; font-size: 16px; cursor: pointer; margin: 10px 0;">
             üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
         </button>
         <button onclick="testNotion()" style="background: #2196F3; color: white; padding: 15px 30px; border: none; border-radius: 8px; font-size: 16px; cursor: pointer; margin: 10px 0; margin-left: 10px;">
             üìù –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–∞—Å–∫ –≤ Notion
         </button>
         <div id="testResult" style="margin-top: 15px; padding: 15px; border-radius: 8px; display: none;"></div>
         <div id="notionResult" style="margin-top: 15px; padding: 15px; border-radius: 8px; display: none;"></div>
        
        <hr>
        <h2>üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</h2>
        <p>1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞" –≤—ã—à–µ</p>
        <p>2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É <code>/start</code></p>
        <p>3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É <code>/status</code></p>
        <p>4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É</p>
    </div>
    
    <script>
         function testBot() {{
         var button = document.querySelector('button');
         var result = document.getElementById('testResult');
         
         button.disabled = true;
         button.textContent = 'üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º...';
         result.style.display = 'block';
         result.innerHTML = '<p>üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É...</p>';
         
         fetch('/test_bot')
             .then(response => response.json())
             .then(data => {{
                 if (data.success) {{
                     result.style.backgroundColor = '#d4edda';
                     result.style.color = '#155724';
                     result.style.border = '1px solid #c3e6cb';
                     result.innerHTML = `
                         <h3>‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!</h3>
                         <p><strong>–ò–º—è –±–æ—Ç–∞:</strong> ${{data.bot_info.result.first_name}}</p>
                         <p><strong>Username:</strong> @${{data.bot_info.result.username}}</p>
                         <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${{data.status}}</p>
                         <p><strong>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</strong> ${{data.message}}</p>
                     `;
                 }} else {{
                     result.style.backgroundColor = '#f8d7da';
                     result.style.color = '#721c24';
                     result.style.border = '1px solid #f5c6cb';
                     result.innerHTML = `
                         <h3>‚ùå –û—à–∏–±–∫–∞!</h3>
                         <p><strong>–û—à–∏–±–∫–∞:</strong> ${{data.error}}</p>
                         ${{data.response ? `<p><strong>–û—Ç–≤–µ—Ç:</strong> ${{data.response}}</p>` : ''}}
                     `;
                 }}
             }})
             .catch(error => {{
                 result.style.backgroundColor = '#f8d7da';
                 result.style.color = '#721c24';
                 result.style.border = '1px solid #f5c6cb';
                 result.innerHTML = `
                     <h3>‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏!</h3>
                     <p><strong>–û—à–∏–±–∫–∞:</strong> ${{error.message}}</p>
                 `;
             }})
             .finally(() => {{
                 button.disabled = false;
                 button.textContent = 'üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞';
             }});
     }}
     
     function testNotion() {{
         var button = document.querySelector('button[onclick="testNotion()"]');
         var result = document.getElementById('notionResult');
         
         button.disabled = true;
         button.textContent = 'üîÑ –°–æ–∑–¥–∞–µ–º —Ç–∞—Å–∫...';
         result.style.display = 'block';
         result.innerHTML = '<p>üîÑ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ Notion...</p>';
         
         fetch('/test_notion')
             .then(response => response.json())
             .then(data => {{
                 if (data.success) {{
                     result.style.backgroundColor = '#d4edda';
                     result.style.color = '#155724';
                     result.style.border = '1px solid #c3e6cb';
                     result.innerHTML = `
                         <h3>‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ Notion!</h3>
                         <p><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> ${{data.title}}</p>
                         <p><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> ${{data.username}}</p>
                         <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${{data.status}}</p>
                         <p><strong>–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:</strong> ${{data.timestamp}}</p>
                         ${{data.notion_url ? `<p><strong>–°—Å—ã–ª–∫–∞:</strong> <a href="${{data.notion_url}}" target="_blank">–û—Ç–∫—Ä—ã—Ç—å –≤ Notion</a></p>` : ''}}
                     `;
                 }} else {{
                     result.style.backgroundColor = '#f8d7da';
                     result.style.color = '#721c24';
                     result.style.border = '1px solid #f5c6cb';
                     result.innerHTML = `
                         <h3>‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏!</h3>
                         <p><strong>–û—à–∏–±–∫–∞:</strong> ${{data.error}}</p>
                         ${{data.details ? `<p><strong>–î–µ—Ç–∞–ª–∏:</strong> ${{data.details}}</p>` : ''}}
                         <p><strong>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:</strong></p>
                         <ul>
                             <li>NOTION_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ</li>
                             <li>NOTION_DATABASE_ID —É–∫–∞–∑–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</li>
                             <li>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏</li>
                         </ul>
                     `;
                 }}
             }})
             .catch(error => {{
                 result.style.backgroundColor = '#f8d7da';
                 result.style.color = '#721c24';
                 result.style.border = '1px solid #f5c6cb';
                 result.innerHTML = `
                     <h3>‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏!</h3>
                     <p><strong>–û—à–∏–±–∫–∞:</strong> ${{error.message}}</p>
                 `;
             }})
             .finally(() => {{
                 button.disabled = false;
                 button.textContent = 'üìù –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–∞—Å–∫ –≤ Notion';
             }});
     }}
    </script>
</body>
</html>"""

@app.route('/test_bot')
def test_bot_endpoint():
    """API endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
    try:
        bot_token = os.getenv('BOT_TOKEN')
        if not bot_token:
            return jsonify({'success': False, 'error': 'BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'})
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_message = f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Railway - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
        url = f"https://api.telegram.org/bot{bot_token}/getMe"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            bot_info = response.json()
            return jsonify({
                'success': True,
                'message': test_message,
                'bot_info': bot_info,
                'status': '–ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω'
            })
        else:
            return jsonify({
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: {response.status_code}',
                'response': response.text
            })
            
    except Exception as e:
        return jsonify({'success': False, 'error': f'–û—à–∏–±–∫–∞: {str(e)}'})

@app.route('/test_notion')
def test_notion_endpoint():
    """API endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Notion –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    try:
        notion_token = os.getenv('NOTION_TOKEN')
        database_id = os.getenv('NOTION_DATABASE_ID')
        
        if not notion_token:
            return jsonify({
                'success': False, 
                'error': 'NOTION_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
                'details': '–î–æ–±–∞–≤—å—Ç–µ NOTION_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway'
            })
        
        if not database_id:
            return jsonify({
                'success': False, 
                'error': 'NOTION_DATABASE_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
                'details': '–î–æ–±–∞–≤—å—Ç–µ NOTION_DATABASE_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway'
            })
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
        test_text = f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç Railway - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        test_username = "Railway Test User"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Notion API
        headers = {
            "Authorization": f"Bearer {notion_token}",
            "Content-Type": "application/json",
            "Notion-Version": "2022-06-28"
        }
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_url = f"https://api.notion.com/v1/databases/{database_id}"
        db_response = requests.get(db_url, headers=headers, timeout=10)
        
        if db_response.status_code != 200:
            return jsonify({
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_response.status_code}',
                'details': db_response.text
            })
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
        from bot.notion_utils import create_notion_task
        success = create_notion_task(test_text, test_username, "Railway Test")
        
        if success:
            return jsonify({
                'success': True,
                'title': test_text,
                'username': test_username,
                'status': '–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'notion_url': f"https://notion.so/{database_id.replace('-', '')}"
            })
        else:
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ Notion',
                'details': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
            })
            
    except Exception as e:
        return jsonify({
            'success': False, 
            'error': f'–û—à–∏–±–∫–∞: {str(e)}',
            'details': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Notion –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'
                 })

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram"""
    try:
        from telegram import Update
        from bot.__main__ import create_bot_app
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
        if not hasattr(app, 'telegram_app'):
            app.telegram_app = create_bot_app()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        update = Update.de_json(request.get_json(), app.telegram_app.bot)
        app.telegram_app.process_update(update)
        return 'OK'
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return 'Error', 500

if __name__ == "__main__":
    port = int(os.environ.get('PORT', 5000))
    print(f"üöÄ Starting updated Railway interface on port {port}")
    app.run(host='0.0.0.0', port=port, debug=False)
