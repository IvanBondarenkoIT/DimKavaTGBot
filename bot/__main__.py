from __future__ import annotations

import os
import requests
from datetime import datetime
from pathlib import Path

from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, ContextTypes, MessageHandler, filters
from flask import Flask, request, jsonify

DATA_DIR = Path("data")

from .notion_utils import create_notion_task

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
first_startup = True

def sanitize_filename(value: str) -> str:
    safe = "".join(c if c.isalnum() or c in ("-", "_", ".") else "_" for c in value)
    return safe.strip("._") or "unknown"

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_chat is None or update.effective_message is None:
        return

    chat = update.effective_chat
    message = update.effective_message

    if message.text is None:
        return

    username = (
        message.from_user.username
        if message.from_user and message.from_user.username
        else (message.from_user.full_name if message.from_user else "unknown")
    )

    timestamp = message.date
    date_dir = timestamp.strftime("%Y-%m-%d")
    time_part = timestamp.strftime("%H-%M-%S")

    user_part = sanitize_filename(username)
    chat_part = sanitize_filename(str(chat.id))

    target_dir = DATA_DIR / chat_part / date_dir
    target_dir.mkdir(parents=True, exist_ok=True)

    filename = f"{message.id}_{time_part}_{user_part}.txt"
    file_path = target_dir / filename

    meta_lines = [
        f"chat_id: {chat.id}",
        f"chat_type: {chat.type}",
        f"message_id: {message.id}",
        f"date_iso: {timestamp.isoformat()}",
        f"user: {username}",
    ]

    content = message.text or ""
    file_path.write_text("\n".join(meta_lines) + "\n\n" + content, encoding="utf-8")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ Notion
    chat_title = chat.title if chat.type != "private" else None
    create_notion_task(content, username, chat_title)

async def handle_start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if update.effective_chat is None:
        return
    
    from datetime import datetime
    startup_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    message = f"""ü§ñ DimKavaTGBot –∞–∫—Ç–∏–≤–µ–Ω!

‚è∞ –í—Ä–µ–º—è: {startup_time}
üåê –î–æ–º–µ–Ω: https://dimkavatgbot-production.up.railway.app
üí¨ –ß–∞—Ç ID: {update.effective_chat.id}

–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. üöÄ"""
    
    await update.message.reply_text(message)

async def handle_status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    if update.effective_chat is None:
        return
    
    from datetime import datetime
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    message = f"""üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:

‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω
‚è∞ –í—Ä–µ–º—è: {current_time}
üåê –î–æ–º–µ–Ω: https://dimkavatgbot-production.up.railway.app
üí¨ –ß–∞—Ç ID: {update.effective_chat.id}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.full_name if update.effective_user else 'Unknown'}

–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! üéâ"""
    
    await update.message.reply_text(message)

async def send_startup_message(bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –≤–æ –≤—Å–µ —á–∞—Ç—ã"""
    try:
        from datetime import datetime
        startup_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        message = f"ü§ñ DimKavaTGBot –∑–∞–ø—É—â–µ–Ω!\n\n‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {startup_time}\nüåê –î–æ–º–µ–Ω: https://dimkavatgbot-production.up.railway.app\n\n–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üöÄ"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ (—ç—Ç–æ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id)
        # –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
        
        print(f"Startup message prepared: {message}")
        return True
    except Exception as e:
        print(f"Error sending startup message: {e}")
        return False

def create_bot_app():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Telegram –±–æ—Ç–∞"""
    load_dotenv()
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise RuntimeError("BOT_TOKEN is not set. Create .env with BOT_TOKEN=...")

    bot_app = (
        Application.builder()
        .token(token)
        .concurrent_updates(True)
        .build()
    )

    text_filter = filters.TEXT & ~filters.COMMAND
    bot_app.add_handler(MessageHandler(text_filter, handle_text))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    from telegram.ext import CommandHandler
    bot_app.add_handler(CommandHandler("start", handle_start_command))
    bot_app.add_handler(CommandHandler("status", handle_status_command))
    
    return bot_app

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–æ—Ç–∞
telegram_app = None

@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞"""
    from datetime import datetime
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv('BOT_TOKEN', '–ù–ï –ù–ê–°–¢–†–û–ï–ù')
    notion_token = os.getenv('NOTION_TOKEN', '–ù–ï –ù–ê–°–¢–†–û–ï–ù')
    notion_db_id = os.getenv('NOTION_DATABASE_ID', '–ù–ï –ù–ê–°–¢–†–û–ï–ù')
    
    return f"""<html>
<head>
    <title>DimKavaTGBot - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; background-color: #f0f8ff; }}
        .container {{ background: white; padding: 30px; border-radius: 15px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); }}
        .status {{ color: green; font-weight: bold; font-size: 18px; }}
        .error {{ color: red; font-weight: bold; font-size: 16px; }}
        .warning {{ color: orange; font-weight: bold; }}
        .info {{ color: blue; font-size: 16px; }}
        .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ DimKavaTGBot - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</h1>
            <p>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞</p>
        </div>
        
        <p class="status">‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç (bot/__main__.py)</p>
        <p class="info">‚è∞ –í—Ä–µ–º—è: {current_time}</p>
        <p class="info">üåê –î–æ–º–µ–Ω: https://dimkavatgbot-production.up.railway.app</p>
        
        <hr>
        <h2>üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:</h2>
        <p><strong>BOT_TOKEN:</strong> <span class="{'error' if bot_token == '–ù–ï –ù–ê–°–¢–†–û–ï–ù' else 'status'}">{bot_token[:10]}{'...' if len(bot_token) > 10 else ''}</span></p>
        <p><strong>NOTION_TOKEN:</strong> <span class="{'error' if notion_token == '–ù–ï –ù–ê–°–¢–†–û–ï–ù' else 'status'}">{notion_token[:10]}{'...' if len(notion_token) > 10 else ''}</span></p>
        <p><strong>NOTION_DATABASE_ID:</strong> <span class="{'error' if notion_db_id == '–ù–ï –ù–ê–°–¢–†–û–ï–ù' else 'status'}">{notion_db_id}</span></p>
        
        <hr>
        <h2>üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</h2>
        <p>1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway</p>
        <p>2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–ø–ª–æ–π</p>
        <p>3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–∞–º–∏ /start –∏ /status</p>
        
        <hr>
        <p><strong>üéØ –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã - –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å!</strong></p>
        
        <hr>
        <h2>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞:</h2>
        <button onclick="testBot()" style="background: #4CAF50; color: white; padding: 15px 30px; border: none; border-radius: 8px; font-size: 16px; cursor: pointer; margin: 10px 0;">
            üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
        </button>
        <div id="testResult" style="margin-top: 15px; padding: 15px; border-radius: 8px; display: none;"></div>
        
        <hr>
        <h2>üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</h2>
        <p>1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞" –≤—ã—à–µ</p>
        <p>2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É <code>/start</code></p>
        <p>3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É <code>/status</code></p>
        <p>4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É</p>
    </div>
    
    <script>
    function testBot() {{
        var button = document.querySelector('button');
        var result = document.getElementById('testResult');
        
        button.disabled = true;
        button.textContent = 'üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º...';
        result.style.display = 'block';
        result.innerHTML = '<p>üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É...</p>';
        
        fetch('/test_bot')
            .then(response => response.json())
            .then(data => {{
                if (data.success) {{
                    result.style.backgroundColor = '#d4edda';
                    result.style.color = '#155724';
                    result.style.border = '1px solid #c3e6cb';
                    result.innerHTML = `
                        <h3>‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!</h3>
                        <p><strong>–ò–º—è –±–æ—Ç–∞:</strong> ${{data.bot_info.result.first_name}}</p>
                        <p><strong>Username:</strong> @${{data.bot_info.result.username}}</p>
                        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${{data.status}}</p>
                        <p><strong>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</strong> ${{data.message}}</p>
                    `;
                }} else {{
                    result.style.backgroundColor = '#f8d7da';
                    result.style.color = '#721c24';
                    result.style.border = '1px solid #f5c6cb';
                    result.innerHTML = `
                        <h3>‚ùå –û—à–∏–±–∫–∞!</h3>
                        <p><strong>–û—à–∏–±–∫–∞:</strong> ${{data.error}}</p>
                        ${{data.response ? `<p><strong>–û—Ç–≤–µ—Ç:</strong> ${{data.response}}</p>` : ''}}
                    `;
                }}
            }})
            .catch(error => {{
                result.style.backgroundColor = '#f8d7da';
                result.style.color = '#721c24';
                result.style.border = '1px solid #f5c6cb';
                result.innerHTML = `
                    <h3>‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏!</h3>
                    <p><strong>–û—à–∏–±–∫–∞:</strong> ${{error.message}}</p>
                `;
            }})
            .finally(() => {{
                button.disabled = false;
                button.textContent = 'üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞';
            }});
    }}
    </script>
</body>
</html>"""

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram"""
    global telegram_app
    if telegram_app is None:
        telegram_app = create_bot_app()
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        update = Update.de_json(request.get_json(), telegram_app.bot)
        telegram_app.process_update(update)
        return 'OK'
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return 'Error', 500

@app.route('/test_bot')
def test_bot_endpoint():
    """API endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
    try:
        bot_token = os.getenv('BOT_TOKEN')
        if not bot_token:
            return jsonify({'success': False, 'error': 'BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'})
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_message = f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Railway - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
        url = f"https://api.telegram.org/bot{bot_token}/getMe"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            bot_info = response.json()
            return jsonify({
                'success': True,
                'message': test_message,
                'bot_info': bot_info,
                'status': '–ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω'
            })
        else:
            return jsonify({
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: {response.status_code}',
                'response': response.text
            })
            
    except Exception as e:
        return jsonify({'success': False, 'error': f'–û—à–∏–±–∫–∞: {str(e)}'})

@app.route('/set_webhook')
def set_webhook():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫ –¥–ª—è –±–æ—Ç–∞"""
    global telegram_app
    if telegram_app is None:
        telegram_app = create_bot_app()
    
    # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –¥–æ–º–µ–Ω
    webhook_url = os.getenv('WEBHOOK_URL')
    if not webhook_url:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        if request:
            # –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤–µ–±-–∑–∞–ø—Ä–æ—Å–∞
            webhook_url = f"{request.url_root.rstrip('/')}/webhook"
        else:
            # Fallback
            webhook_url = 'https://dimkavatgbot-production.up.railway.app/webhook'
    
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –¥–µ–ø–ª–æ–µ –≤–µ–±—Ö—É–∫ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Telegram API
    return f'Webhook –≥–æ—Ç–æ–≤ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ: {webhook_url}'

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    load_dotenv()
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise RuntimeError("BOT_TOKEN is not set. Create .env with BOT_TOKEN=...")

    bot_app = create_bot_app()
    bot_app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Å–∫–∞–µ–º –ª–∏ –º—ã –ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –≤ –æ–±–ª–∞–∫–µ
    if os.getenv('RAILWAY_ENVIRONMENT') or os.getenv('PORT'):
        # –í –æ–±–ª–∞–∫–µ - –∑–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
        port = int(os.getenv('PORT', 5000))
        app.run(host='0.0.0.0', port=port)
    else:
        # –õ–æ–∫–∞–ª—å–Ω–æ - –∑–∞–ø—É—Å–∫–∞–µ–º polling
        main()


