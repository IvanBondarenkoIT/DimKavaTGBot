#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è webhook –æ–±—Ä–∞–±–æ—Ç–∫–∏
"""

import os
import sys
import requests
import json
from datetime import datetime

def test_health_endpoint():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç endpoint /health"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint /health...")
    
    try:
        response = requests.get('http://localhost:5000/health', timeout=10)
        print(f"‚úÖ Health check: {response.status_code}")
        data = response.json()
        print(f"üìÑ –û—Ç–≤–µ—Ç: {json.dumps(data, indent=2, ensure_ascii=False)}")
        return True
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_webhook_endpoint():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç endpoint /webhook —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint /webhook...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
    test_update = {
        "update_id": 123456789,
        "message": {
            "message_id": 1,
            "from": {
                "id": 123456789,
                "is_bot": False,
                "first_name": "Test",
                "username": "testuser"
            },
            "chat": {
                "id": 123456789,
                "first_name": "Test",
                "type": "private"
            },
            "date": int(datetime.now().timestamp()),
            "text": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook"
        }
    }
    
    try:
        response = requests.post(
            'http://localhost:5000/webhook',
            json=test_update,
            timeout=10
        )
        print(f"‚úÖ Webhook test: {response.status_code}")
        print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
        return True
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_bot_control_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç endpoints —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoints —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±—Ä–æ—Å –æ—à–∏–±–æ–∫
    try:
        response = requests.get('http://localhost:5000/reset_errors', timeout=10)
        print(f"‚úÖ Reset errors: {response.status_code}")
        data = response.json()
        print(f"üìÑ –û—Ç–≤–µ—Ç: {json.dumps(data, indent=2, ensure_ascii=False)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –æ—à–∏–±–æ–∫: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        response = requests.get('http://localhost:5000/restart_bot', timeout=10)
        print(f"‚úÖ Restart bot: {response.status_code}")
        data = response.json()
        print(f"üìÑ –û—Ç–≤–µ—Ç: {json.dumps(data, indent=2, ensure_ascii=False)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    
    return True

def test_multiple_webhooks():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ webhook –∑–∞–ø—Ä–æ—Å—ã"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ webhook –∑–∞–ø—Ä–æ—Å—ã...")
    
    test_messages = [
        "–ü–µ—Ä–≤–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "–í—Ç–æ—Ä–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", 
        "–¢—Ä–µ—Ç—å–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "–ß–µ—Ç–≤–µ—Ä—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "–ü—è—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    ]
    
    success_count = 0
    
    for i, message in enumerate(test_messages, 1):
        test_update = {
            "update_id": 123456789 + i,
            "message": {
                "message_id": i,
                "from": {
                    "id": 123456789,
                    "is_bot": False,
                    "first_name": "Test",
                    "username": "testuser"
                },
                "chat": {
                    "id": 123456789,
                    "first_name": "Test",
                    "type": "private"
                },
                "date": int(datetime.now().timestamp()),
                "text": message
            }
        }
        
        try:
            response = requests.post(
                'http://localhost:5000/webhook',
                json=test_update,
                timeout=5
            )
            if response.status_code == 200:
                print(f"‚úÖ Webhook {i}: OK")
                success_count += 1
            else:
                print(f"‚ùå Webhook {i}: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Webhook {i}: {e}")
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(test_messages)} —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    return success_count == len(test_messages)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è webhook –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    bot_token = os.getenv('BOT_TOKEN')
    notion_token = os.getenv('NOTION_TOKEN')
    notion_db_id = os.getenv('NOTION_DATABASE_ID')
    
    print(f"  BOT_TOKEN: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if bot_token else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    print(f"  NOTION_TOKEN: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if notion_token else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    print(f"  NOTION_DATABASE_ID: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if notion_db_id else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    
    if not bot_token:
        print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å BOT_TOKEN=your_token")
        print("   –¢–µ—Å—Ç—ã –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    
    print("\n" + "=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("Health endpoint", test_health_endpoint),
        ("Webhook endpoint", test_webhook_endpoint),
        ("Bot control endpoints", test_bot_control_endpoints),
        ("Multiple webhooks", test_multiple_webhooks),
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\nüß™ {test_name}:")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! Webhook –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("\nüí° –¢–µ–ø–µ—Ä—å –≤–∞—à –±–æ—Ç –¥–æ–ª–∂–µ–Ω:")
        print("  - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å webhook'–∏ –±–µ–∑ –æ—à–∏–±–æ–∫ event loop")
        print("  - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö")
        print("  - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏.")
    
    return passed == len(results)

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

